<div>
    <label class="@Styles.SubTitle">
        @Title
    </label>
    <div class="flex flex-row fustify-start mt-1 lg:mt-3">
        <button type="button"
                @onclick="OnDecrement"
                class="w-10 bg-@Styles.PrimaryColor text-@Styles.Background
        hover:bg-@Styles.PrimaryColorLigther rounded-l cursor-pointer flex justify-center items-center">
            <svg class="w-6 h-6" fill="currentColor"
                 viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd">
                </path>
            </svg>
        </button>
        <input type="number" 
               readonly 
               class="flex-1 md:w-32 px-4 py-2 text-center bg-@Styles.BackgroundDarker font-semibold
        text-md flex items-center text-@Styles.Text outline-none focus:outline-none"
               @bind="Value"
               min="@Minimum"
               max="@Maximum" />
        <button type="button" 
                @onclick="OnIncrement"
                class="w-10 bg-@Styles.PrimaryColor text-@Styles.Background
        hover:bg-@Styles.PrimaryColorLigther rounded-r cursor-pointer flex justify-center items-center">
            <svg class="w-7 h-7" fill="currentColor"
                 viewBox="0 0 20 20"
                 xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd">
                </path>
            </svg>
        </button>
    </div>
</div>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int Value { get; set; } = 0;

    [Parameter]
    public int Minimum { get; set; } = 0;

    [Parameter]
    public int Maximum { get; set; } = 100;

    [Parameter]
    public EventCallback<int> OnValueChanged { get; set; }

    public void OnIncrement()
    {
        if (Value < Maximum)
        {
            Value++;
            OnValueChanged.InvokeAsync(Value);
        }
    }

    public void OnDecrement()
    {
        if (Value > Minimum)
        {
            Value--;
            OnValueChanged.InvokeAsync(Value);
        }
    }

}
