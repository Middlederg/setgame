@inject Set.Web.Services.GameService gameService

<div class="grid grid-cols-4 gap-0 mx-4 my-2">

    @foreach (var card in Game.AvaliableCardList)
    {
        <Card SetCard="card"
              OnCardSelected="@OnCardSelectedClicked"
              OnCardDeSelected="@OnCardDeSelectedClicked" />
    }

</div>

<div class="grid grid-cols-1 md:grid-cols-2">

    <div class="flex flex-col md:flex-row justify-center items-center">
        <PrimaryButton Text="Check Set"
                       IsDisabled="buttonIsDisabled"
                       OnButtonClicked="CheckSet">
        </PrimaryButton>

        <PrimaryButton Text="Ask info"
                       OnButtonClicked="CurrentSets">
            <svg viewBox="0 0 20 20" 
                 fill="currentColor" 
                 class="w-6 h-6">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd">
                </path>
            </svg>
        </PrimaryButton>

        @if (Game.GameMode.IsHelpAllowed)
        {
            <PrimaryButton Text="Hint"
                           OnButtonClicked="GetHelp">
                <svg xmlns="http://www.w3.org/2000/svg" 
                     class="w-6 h-6"
                     viewBox="0 0 24 24" 
                     stroke-width="1.5" 
                     stroke="currentColor" 
                     fill="none" 
                     stroke-linecap="round" 
                     stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" />
                    <path d="M10 9v6l5 -3z" />
                </svg>
            </PrimaryButton>
        }
    </div>

    <div class="m-4">
        <blockquote class="flex flex-wrap flex-col bg-gray-100 text-gray-900 border-r-8 italic border-gray-500 px-4 py-3">
            <p class="flex justify-end">@message</p>
            <span class="flex justify-end text-sm text-gray-900 font-semibold pt-2">
                Select three cards ant check if it is really a SET
            </span>
        </blockquote>
    </div>
</div>

@code {
    private List<Card> SelectedCards;

    private string message;
    private bool buttonIsDisabled = true;

    [Parameter]
    public Set.Core.Game Game { get; set; }

    [Parameter]
    public EventCallback<Set.Core.CardTrio> OnSetDiscovered { get; set; }

    [Parameter]
    public EventCallback OnLevelCompleted { get; set; }

    protected override void OnInitialized()
    {
        SelectedCards = new List<Card>();
        message = Game.GetLastMessage();
    }

    private void OnCardSelectedClicked(Card selectedCard)
    {
        SelectedCards.Add(selectedCard);
        buttonIsDisabled = SelectedCards.Count() != 3;
    }

    private void OnCardDeSelectedClicked(Card selectedCard)
    {
        SelectedCards.Remove(selectedCard);
        buttonIsDisabled = SelectedCards.Count() != 3;
    }

    private async Task CheckSet()
    {
        var cardTrio = new Core.CardTrio(SelectedCards.Select(x => x.SetCard));
        bool success = Game.Check(cardTrio, (await gameService.GetPlayer()).Id);
        if (success)
        {
            await OnSetDiscovered.InvokeAsync(cardTrio);
            Game.RefreshCards(cardTrio);
            SelectedCards.ForEach(x => x.Selected = false);
            SelectedCards = new List<Card>();
            buttonIsDisabled = true;
            message = Game.GetLastMessage();

            if (Game.LevelCompleted())
            {
                await OnLevelCompleted.InvokeAsync(null);
            }
        }
        else message = Game.GetLastMessage();
    }

    private async Task GetHelp()
    {
        message = await Game.SetCountHelp((await gameService.GetPlayer()).Id);
    }

    private async Task CurrentSets()
    {
        var sets = await new Set.Core.SetFinder(Game.AvaliableCardList).FindAsync();
    }
}
