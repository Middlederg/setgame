@page "/playGame"

@inject NavigationManager navigationManager
@inject GameService gameService

@if (game is null)
{
    <label>Preparing board</label>
}
else
{
    <div class="container mx-auto md:px-5 lg:px-20">

        <div class="flex justify-between items-center mt-3 lg:my-3 xl:my-6">
            <span class="mx-4 text-gray-700 font-semibold border-gray-300 uppercase text-sm lg:text-xl xl:text-4xl">Find sets</span>

            <TimerAlarm TimesUp="ShowTimesUpAlert" Time="game.CurrentTime"></TimerAlarm>

        </div>

        @if (model.IsGameOver())
        {
            <div class="bg-gray-200 border-l-4 border-gray-700 text-gray-900 text-sm p-4 my-4" role="alert">
                <p class="font-bold">@model.GameResultMessage</p>
                <p>Score: @game.Players.First().Score.Points()</p>
            </div>
        }
        else
        {
            <Board Game="game" OnSetDiscovered="AddSetToList" OnLevelCompleted="LevelCompleted"></Board>
        }

        <div class="m-4">
            <h3 class="mb-1 text-gray-700 font-semibold border-gray-300 uppercase text-sm lg:text-lg xl:text-2xl ">
                Discovered sets
            </h3>

            @foreach (var row in game.DiscoveredSets)
            {
                <SetRow Row="row"></SetRow>
            }
        </div>

        <div class="m-4">
            <h3 class="mb-1 text-gray-700 font-semibold border-gray-300 uppercase text-sm lg:text-lg xl:text-2xl ">
                Log
            </h3>

            @foreach (var message in model.Log)
            {
                <span>
                    @message.Message
                </span>
            }
        </div>

    </div>
}


@code {

    private GameModel model = new GameModel();

    private Set.Core.Game game;

    protected override async Task OnInitializedAsync()
    {
        var optionsModel = await gameService.GetOptions();
        var player = await gameService.GetPlayer();

        game = new Set.Core.Game(
            optionsModel.GetOptions(),
            (message, type) => model.Log.Add(new LogMessage(message, type)),
            (player.Id, player.Name));

        game.StartGame();
    }

    private void ShowTimesUpAlert()
    {
        model.GameResultMessage = "Time's up!";
    }

    private void LevelCompleted()
    {
        model.GameResultMessage = "Level completed!";
    }

    private void AddSetToList(Set.Core.CardTrio trio)
    {
        // rows.Add(new SetRowViewModel(rows.Count() + 1, trio, trio.ToString(), currentTime.TimeSpan));
    }

    private void GoToGameSummary()
    {
        // gameService.SetCurrentGame(game);
        //  navigationManager.NavigateTo("GameSummary");
    }
}
